import asyncio
import aiohttp
import json
import time
from datetime import datetime
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from flask import Flask
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
WHITELIST_FILE = 'whitelist.json'
APPROVED_CHANNELS_FILE = 'approved_channels.json'
STATS_FILE = 'stats.json'
PENDING_CHANNELS_FILE = 'pending_channels.json'

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Replit
app = Flask('')

@app.route('/')
def home():
    return "üåø Garden Stock Bot is running!"

def run_web():
    app.run(host='0.0.0.0', port=8080)

class GardenStockBot:
    def __init__(self):
        self.whitelist = self.load_json(WHITELIST_FILE, [])
        self.approved_channels = self.load_json(APPROVED_CHANNELS_FILE, {})
        self.pending_channels = self.load_json(PENDING_CHANNELS_FILE, {})
        self.stats = self.load_json(STATS_FILE, {
            'start_time': time.time(),
            'total_messages_sent': 0,
            'channels_approved': 0,
            'restart_count': 0
        })
        self.proctor_items = self.load_proctor_items()
        self.last_stock = {}
        self.last_messages = {}
        self.stock_check_task = None

    def load_json(self, filename, default):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return default

    def save_json(self, filename, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
            return False

    def load_proctor_items(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø REPLIT"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            if os.path.exists('proctor.txt'):
                with open('proctor.txt', 'r', encoding='utf-8') as f:
                    items = []
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            clean_item = ' '.join(line.split()).lower()
                            items.append(clean_item)
                    
                    logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ proctor.txt")
                    logger.info(f"üìù –ü—Ä–µ–¥–º–µ—Ç—ã: {items}")
                    return items
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä
                default_items = [
                    "seed packet",
                    "watering can", 
                    "garden glove",
                    "plant food",
                    "pruning shear"
                ]
                with open('proctor.txt', 'w', encoding='utf-8') as f:
                    for item in default_items:
                        f.write(item + '\n')
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª proctor.txt —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                return default_items
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ proctor.txt: {e}")
            return ["seed packet", "watering can"]  # Fallback items

    def is_whitelisted(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""
        return str(user_id) in self.whitelist

    def add_to_whitelist(self, user_id, username="Unknown"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        user_id_str = str(user_id)
        if user_id_str not in self.whitelist:
            self.whitelist.append(user_id_str)
            if self.save_json(WHITELIST_FILE, self.whitelist):
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {user_id_str} ({username})")
                return True
        return False

    def remove_from_whitelist(self, user_id):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        user_id_str = str(user_id)
        if user_id_str in self.whitelist:
            self.whitelist.remove(user_id_str)
            if self.save_json(WHITELIST_FILE, self.whitelist):
                logger.info(f"‚ùå –£–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {user_id_str}")
                return True
        return False

    def add_pending_channel(self, channel_id, channel_title, invited_by, invite_link=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        self.pending_channels[str(channel_id)] = {
            'title': channel_title,
            'invited_by': invited_by,
            'request_time': time.time(),
            'invite_link': invite_link
        }
        if self.save_json(PENDING_CHANNELS_FILE, self.pending_channels):
            logger.info(f"‚è≥ –ö–∞–Ω–∞–ª –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {channel_title} (ID: {channel_id})")
            return True
        return False

    def remove_pending_channel(self, channel_id):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è"""
        channel_id_str = str(channel_id)
        if channel_id_str in self.pending_channels:
            del self.pending_channels[channel_id_str]
            if self.save_json(PENDING_CHANNELS_FILE, self.pending_channels):
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è: {channel_id_str}")
                return True
        return False

    def add_approved_channel(self, channel_id, channel_title, approved_by):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        self.approved_channels[str(channel_id)] = {
            'title': channel_title,
            'approved_at': time.time(),
            'approved_by': approved_by
        }
        self.stats['channels_approved'] = len(self.approved_channels)
        if self.save_json(APPROVED_CHANNELS_FILE, self.approved_channels):
            self.save_json(STATS_FILE, self.stats)
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –æ–¥–æ–±—Ä–µ–Ω: {channel_title} (ID: {channel_id})")
            return True
        return False

    def remove_approved_channel(self, channel_id):
        """–£–¥–∞–ª—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        channel_id_str = str(channel_id)
        if channel_id_str in self.approved_channels:
            del self.approved_channels[channel_id_str]
            self.stats['channels_approved'] = len(self.approved_channels)
            if self.save_json(APPROVED_CHANNELS_FILE, self.approved_channels):
                self.save_json(STATS_FILE, self.stats)
                logger.info(f"‚ùå –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω: {channel_id_str}")
                return True
        return False

    async def get_real_garden_stock(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞ –∏–∑ Grow A Garden API - –ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø REPLIT"""
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://growagarden.gg/',
            'Origin': 'https://growagarden.gg'
        }
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Replit
            timeout = aiohttp.ClientTimeout(total=15)
            
            async with aiohttp.ClientSession(headers=headers, timeout=timeout) as session:
                async with session.get('https://growagarden.gg/api/stock') as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ API")
                        return self.parse_stock_data(data)
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                        return {}
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∫–∞: {e}")
            return {}

    def parse_stock_data(self, data):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ proctor.txt - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        stock_items = {}
        
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –†–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
            if isinstance(data, list):
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                stock_data = data
            elif 'result' in data and 'data' in data['result']:
                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å result.data
                stock_data = data['result']['data']
            elif 'data' in data:
                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å data
                stock_data = data['data']
            else:
                # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                stock_data = data
            
            if not stock_data:
                logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞ –ø—É—Å—Ç—ã")
                return {}
                
            logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(stock_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–æ–∫–∞")
            
            found_count = 0
            for item in stock_data:
                try:
                    name = item.get('name', '').lower().strip()
                    quantity = item.get('quantity', 0)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if name in self.proctor_items:
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç: {name} - {quantity} —à—Ç.")
                    
                    if name in self.proctor_items and quantity > 0:
                        stock_items[name] = quantity
                        found_count += 1
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                    continue
                    
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {found_count} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å—Ç–æ–∫–µ")
            return stock_items
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

    def format_stock_message(self, new_items):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–æ–∫–µ"""
        if not new_items:
            return None
            
        if len(new_items) == 1:
            title = "üéØ *–ù–û–í–´–ô –ü–†–ï–î–ú–ï–¢ –í –°–¢–û–ö–ï!*\n\n"
        else:
            title = f"üéØ *–ù–û–í–´–ï –ü–†–ï–î–ú–ï–¢–´ –í –°–¢–û–ö–ï!* ({len(new_items)} —à—Ç.)\n\n"
        
        items_text = ""
        for item_name, quantity in new_items.items():
            display_name = item_name.title()  # Capitalize each word
            items_text += f"üü¢ *{display_name}* ‚Äî `{quantity}` —à—Ç.\n"
        
        message = f"{title}{items_text}\n‚è∞ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%H:%M:%S')}"
        return message

    def find_new_items(self, current_stock):
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        new_items = {}
        
        for item_name, quantity in current_stock.items():
            if item_name not in self.last_stock:
                new_items[item_name] = quantity
                logger.info(f"üÜï –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {item_name} - {quantity} —à—Ç.")
                
        self.last_stock = current_stock.copy()
        return new_items

    async def send_stock_updates(self, application, new_items):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        if not new_items:
            return
            
        message = self.format_stock_message(new_items)
        if not message:
            return
            
        sent_count = 0
        failed_channels = []
        
        logger.info(f"üì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ {len(self.approved_channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        for channel_id, channel_info in list(self.approved_channels.items()):
            try:
                logger.info(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: {channel_info['title']} (ID: {channel_id})")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await application.bot.send_message(
                    chat_id=channel_id, 
                    text=message, 
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                
                self.last_messages[str(channel_id)] = sent_message.message_id
                sent_count += 1
                
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_info['title']}")
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
            except Exception as e:
                error_msg = str(e)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {error_msg}")
                
                # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤, —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
                if "Chat not found" in error_msg or "bot is not a member" in error_msg or "Forbidden" in error_msg:
                    failed_channels.append(channel_id)
                    logger.warning(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª {channel_id} –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        for channel_id in failed_channels:
            self.remove_approved_channel(channel_id)
        
        if sent_count > 0:
            self.stats['total_messages_sent'] += sent_count
            self.save_json(STATS_FILE, self.stats)
            logger.info(f"üìä –ò—Ç–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏: {sent_count} —É—Å–ø–µ—à–Ω–æ, {len(failed_channels)} –Ω–µ—É–¥–∞—á–Ω–æ")

    async def check_stock_loop(self, application):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞")
        
        check_count = 0
        error_count = 0
        
        while True:
            try:
                if error_count > 5:
                    logger.warning("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
                    error_count = 0
                
                current_stock = await self.get_real_garden_stock()
                
                if current_stock:
                    new_items = self.find_new_items(current_stock)
                    
                    if new_items:
                        logger.info(f"üéÅ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {list(new_items.keys())}")
                        await self.send_stock_updates(application, new_items)
                        error_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    else:
                        check_count += 1
                        if check_count % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
                            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ - –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç")
                            logger.info(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫: {len(current_stock)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞")
                    error_count += 1
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                error_count += 1
                await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

    def get_bot_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        uptime = time.time() - self.stats['start_time']
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        seconds = int(uptime % 60)
        
        return f"""
üåø GARDEN STOCK BOT - –°–¢–ê–¢–ò–°–¢–ò–ö–ê üåø

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours:02d}:{minutes:02d}:{seconds:02d}
üìä –ö–∞–Ω–∞–ª–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ: {self.stats['channels_approved']}
üì® –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['total_messages_sent']}
üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(self.whitelist)}
üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(self.proctor_items)}
‚è≥ –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {len(self.pending_channels)}

üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%H:%M:%S')}
        """

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = GardenStockBot()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    username = user.username or user.first_name
    
    if not bot.is_whitelisted(user_id):
        welcome_text = f"""
üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! üåø

ü§ñ *Garden Stock Bot* - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç–µ–ª—å —Å—Ç–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ *Grow A Garden*.

‚ú® *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üìù *–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:*
–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!

‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º.*
*–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request*
        """
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="make_request")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_public")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        return
        
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_welcome = f"""
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username}! üåü

ü§ñ Garden Stock Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ: {len(bot.approved_channels)}
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(bot.proctor_items)}
‚Ä¢ –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {len(bot.pending_channels)}

üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/channels - –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã  
/pending - –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
/approve <ID> - –û–¥–æ–±—Ä–∏—Ç—å –∫–∞–Ω–∞–ª
/reject <ID> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª
/addadmin <ID> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
/removeadmin <ID> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
/listadmins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤

‚ùì –ü–æ–º–æ—â—å:
/help - –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

üí° –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–æ–∫!
    """
    
    stats = bot.get_bot_stats()
    await update.message.reply_text(admin_welcome)
    await update.message.reply_text(stats)

async def request_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    user = update.effective_user
    user_id = user.id
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞—è–≤–∫–∏
    request_id = int(time.time())
    
    instruction_text = f"""
üì® –§–û–†–ú–ê –ó–ê–Ø–í–ö–ò –ù–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï

üë§ *–ó–∞—è–≤–∏—Ç–µ–ª—å:* {user.first_name}
üÜî *ID:* `{user_id}`
üìã *ID –∑–∞—è–≤–∫–∏:* `{request_id}`

üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏:*

1. *–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª* –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
   - –ü—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
   - –ü—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

2. *–ü—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞:*
   - –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
   - ID –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ)
   - –°—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª

3. *–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:*

‚è≥ *–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤*

üí° *–ö–∞–∫ –Ω–∞–π—Ç–∏ ID –∫–∞–Ω–∞–ª–∞:*
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ @username_to_id_bot –≤ –∫–∞–Ω–∞–ª
‚Ä¢ –ò–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É @userinfobot
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫—É
    context.user_data['making_request'] = True
    context.user_data['request_id'] = request_id
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="cancel_request")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(instruction_text, reply_markup=reply_markup)

async def handle_request_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_id = user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—è–≤–∫—É
    if not context.user_data.get('making_request'):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    lines = text.split('\n')
    channel_data = {
        'name': '',
        'id': '',
        'link': '',
        'user_id': user_id,
        'username': user.first_name,
        'request_time': time.time()
    }
    
    for line in lines:
        line = line.strip()
        if line.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ:'):
            channel_data['name'] = line.replace('–ù–∞–∑–≤–∞–Ω–∏–µ:', '').strip()
        elif line.startswith('ID:'):
            channel_data['id'] = line.replace('ID:', '').strip()
        elif 't.me/' in line or 'https://' in line:
            channel_data['link'] = line.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if not channel_data['name']:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ù–∞–∑–≤–∞–Ω–∏–µ: –í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞`")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    request_id = context.user_data.get('request_id', int(time.time()))
    channel_id = channel_data['id'] or f"pending_{request_id}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ–∂–∏–¥–∞–Ω–∏–µ
    invited_by = f"{user.first_name} (ID: {user_id})"
    if bot.add_pending_channel(channel_id, channel_data['name'], invited_by, channel_data['link']):
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.pop('making_request', None)
        context.user_data.pop('request_id', None)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_text = f"""
‚úÖ –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –ü–û–î–ê–ù–ê!

üìã *–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_data['name']}
‚Ä¢ ID: `{channel_id}`
‚Ä¢ –°—Å—ã–ª–∫–∞: {channel_data['link'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{request_id}`

‚è≥ *–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.*

üí¨ *–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.*
        """
        
        await update.message.reply_text(success_text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        notification_text = f"""
üì® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï!

üìã *–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_data['name']}
‚Ä¢ ID: `{channel_id}`
‚Ä¢ –°—Å—ã–ª–∫–∞: {channel_data['link'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –ó–∞—è–≤–∏—Ç–µ–ª—å: {user.first_name}
‚Ä¢ ID –∑–∞—è–≤–∏—Ç–µ–ª—è: `{user_id}`
‚Ä¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{request_id}`

üí¨ *–î–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:*
/pending
        """
        
        for admin_id in bot.whitelist:
            try:
                await context.bot.send_message(
                    chat_id=int(admin_id),
                    text=notification_text
                )
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
                
        logger.info(f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user.first_name}: {channel_data['name']}")
        
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def cancel_request_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    if context.user_data.get('making_request'):
        context.user_data.pop('making_request', None)
        context.user_data.pop('request_id', None)
        await update.message.reply_text("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    stats = bot.get_bot_stats()
    await update.message.reply_text(stats)

async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not bot.approved_channels:
        await update.message.reply_text("üì≠ –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return
        
    channels_list = "‚úÖ –û–î–û–ë–†–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´:\n\n"
    for channel_id, channel_info in bot.approved_channels.items():
        approved_time = datetime.fromtimestamp(channel_info['approved_at']).strftime('%d.%m.%Y %H:%M')
        channels_list += f"üì¢ {channel_info['title']}\nüÜî `{channel_id}`\n‚è∞ –û–¥–æ–±—Ä–µ–Ω: {approved_time}\n\n"
    
    await update.message.reply_text(channels_list)

async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not bot.pending_channels:
        await update.message.reply_text("‚è≥ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        return
        
    pending_list = "‚è≥ –ó–ê–Ø–í–ö–ò –ù–ê –†–ê–°–°–ú–û–¢–†–ï–ù–ò–ò:\n\n"
    buttons = []
    
    for channel_id, channel_info in bot.pending_channels.items():
        request_time = datetime.fromtimestamp(channel_info['request_time']).strftime('%d.%m %H:%M')
        pending_list += f"üì¢ {channel_info['title']}\nüÜî `{channel_id}`\nüë§ –î–æ–±–∞–≤–∏–ª: {channel_info['invited_by']}\n‚è∞ –ó–∞–ø—Ä–æ—Å: {request_time}\n\n"
        
        buttons.append([
            InlineKeyboardButton(f"‚úÖ {channel_info['title'][:15]}", callback_data=f"approve:{channel_id}"),
            InlineKeyboardButton(f"‚ùå {channel_info['title'][:15]}", callback_data=f"reject:{channel_id}")
        ])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(pending_list, reply_markup=reply_markup)

async def approve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–¥–æ–±—Ä—è–µ—Ç –∫–∞–Ω–∞–ª –ø–æ ID"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <channel_id>")
        return
        
    channel_id = context.args[0]
    
    if channel_id not in bot.pending_channels:
        await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
        return
        
    channel_info = bot.pending_channels[channel_id]
    
    if bot.add_approved_channel(channel_id, channel_info['title'], f"user_{user_id}"):
        bot.remove_pending_channel(channel_id)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
        if channel_info.get('invite_link'):
            try:
                await context.bot.join_chat(channel_info['invite_link'])
                logger.info(f"‚úÖ –ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel_info['title']}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É: {e}")
        
        await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!\n\nüì¢ {channel_info['title']}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

async def reject_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∫–∞–Ω–∞–ª –ø–æ ID"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <channel_id>")
        return
        
    channel_id = context.args[0]
    
    if channel_id not in bot.pending_channels:
        await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
        return
        
    channel_info = bot.pending_channels[channel_id]
    
    if bot.remove_pending_channel(channel_id):
        await update.message.reply_text(f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\nüì¢ {channel_info['title']}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    
    data = query.data
    
    if data == "make_request":
        await query.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.")
        await query.answer()
        return
        
    elif data == "help_public":
        help_text = """
‚ùì –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´:

ü§ñ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?*
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ Grow A Garden
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
- –†–∞–±–æ—Ç–∞–µ—Ç 24/7

üìù *–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É?*
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request
- –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ñ–æ—Ä–º–µ –∑–∞—è–≤–∫–∏
- –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

‚è∞ *–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—Ç–æ–∫?*
- –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

üì® *–ö—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?*
- –í –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã

üîß *–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:* –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request
        """
        await query.message.reply_text(help_text)
        await query.answer()
        return
        
    elif data == "cancel_request":
        if context.user_data.get('making_request'):
            context.user_data.pop('making_request', None)
            context.user_data.pop('request_id', None)
            await query.message.edit_text("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            await query.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if not bot.is_whitelisted(user_id):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
        
    await query.answer()
    
    if data.startswith('approve:'):
        channel_id = data.split(':')[1]
        
        if channel_id in bot.pending_channels:
            channel_info = bot.pending_channels[channel_id]
            
            if bot.add_approved_channel(channel_id, channel_info['title'], f"user_{user_id}"):
                bot.remove_pending_channel(channel_id)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                if channel_info.get('invite_link'):
                    try:
                        await context.bot.join_chat(channel_info['invite_link'])
                        logger.info(f"‚úÖ –ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel_info['title']}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É: {e}")
                
                await query.edit_message_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!\n\n"
                    f"üì¢ {channel_info['title']}\n"
                    f"üÜî `{channel_id}`"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
        else:
            await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
    elif data.startswith('reject:'):
        channel_id = data.split(':')[1]
        
        if channel_id in bot.pending_channels:
            channel_info = bot.pending_channels[channel_id]
            
            if bot.remove_pending_channel(channel_id):
                await query.edit_message_text(
                    f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                    f"üì¢ {channel_info['title']}\n"
                    f"üÜî `{channel_id}`"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
        else:
            await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        # –ü–æ–º–æ—â—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = """
üåø GARDEN STOCK BOT - –ü–û–ú–û–©–¨ üåø

ü§ñ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?*
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ Grow A Garden –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.

üìù *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª?*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!

‚è∞ *–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫:* –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 24/7

üîß *–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:* –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /request
        """
        await update.message.reply_text(help_text)
        return
        
    # –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    help_text = """
üåø GARDEN STOCK BOT - –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê üåø

üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/channels - –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
/pending - –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ

‚öôÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò:
/approve <ID> - –û–¥–æ–±—Ä–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ ID
/reject <ID> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ ID

üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò:
/addadmin <ID> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/removeadmin <ID> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/listadmins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

‚ùì –ü–û–ú–û–©–¨:
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –ü–†–û–¶–ï–°–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /request
2. –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏
3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ /pending
4. –û–¥–æ–±—Ä—è–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–æ–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥!
    """
    await update.message.reply_text(help_text)

async def add_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>")
        return
        
    new_admin_id = context.args[0]
    username = update.effective_user.username or "Unknown"
    
    if bot.add_to_whitelist(new_admin_id, username):
        await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüÜî `{new_admin_id}`")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def remove_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin <user_id>")
        return
        
    remove_admin_id = context.args[0]
    
    if remove_admin_id == str(user_id):
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        return
        
    if bot.remove_from_whitelist(remove_admin_id):
        await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!\n\nüÜî `{remove_admin_id}`")
    else:
        await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")

async def list_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not bot.whitelist:
        await update.message.reply_text("üë• –í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
        
    admins_list = "üë• –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´:\n\n"
    for admin_id in bot.whitelist:
        admins_list += f"‚ñ´Ô∏è `{admin_id}`\n"
    
    await update.message.reply_text(admins_list)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("request", request_command))
    application.add_handler(CommandHandler("cancelrequest", cancel_request_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("channels", channels_command))
    application.add_handler(CommandHandler("pending", pending_command))
    application.add_handler(CommandHandler("approve", approve_command))
    application.add_handler(CommandHandler("reject", reject_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("addadmin", add_admin_command))
    application.add_handler(CommandHandler("removeadmin", remove_admin_command))
    application.add_handler(CommandHandler("listadmins", list_admins_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_request_data
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

async def start_stock_checker(application):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–∫–∞ –≤ —Ñ–æ–Ω–µ"""
    await asyncio.sleep(5)  # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.check_stock_loop(application)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        from config import BOT_TOKEN
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Replit
        Thread(target=run_web, daemon=True).start()
        logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Job Queue
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(application)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–∫–∞ –≤ —Ñ–æ–Ω–µ
        loop = asyncio.get_event_loop()
        loop.create_task(start_stock_checker(application))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üåø –ó–∞–ø—É—Å–∫–∞–µ–º Garden Stock Bot...")
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(bot.whitelist)}")
        logger.info(f"   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(bot.proctor_items)}")
        logger.info(f"   - –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(bot.approved_channels)}")
        logger.info(f"   - –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {len(bot.pending_channels)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        application.run_polling()
        
    except ImportError:
        logger.error("‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å BOT_TOKEN.")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == '__main__':
    main()