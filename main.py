import asyncio
import aiohttp
import json
import time
from datetime import datetime
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from flask import Flask
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
WHITELIST_FILE = 'whitelist.json'
APPROVED_CHANNELS_FILE = 'approved_channels.json'
STATS_FILE = 'stats.json'
PENDING_CHANNELS_FILE = 'pending_channels.json'
PROCTOR_FILE = 'proctor.json'

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Replit
app = Flask('')

@app.route('/')
def home():
    return "üåø Garden Stock Bot is running!"

def run_web():
    app.run(host='0.0.0.0', port=8080)

class GardenStockBot:
    def __init__(self):
        self.whitelist = self.load_json(WHITELIST_FILE, [])
        self.approved_channels = self.load_json(APPROVED_CHANNELS_FILE, {})
        self.pending_channels = self.load_json(PENDING_CHANNELS_FILE, {})
        self.stats = self.load_json(STATS_FILE, {
            'start_time': time.time(),
            'total_messages_sent': 0,
            'channels_approved': 0,
            'restart_count': 0
        })
        self.proctor_items = self.load_proctor_items()
        self.last_stock = {}
        self.last_messages = {}
        self.stock_check_task = None

    def load_json(self, filename, default):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return default

    def save_json(self, filename, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
            return False

    def load_proctor_items(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ JSON"""
        try:
            if os.path.exists(PROCTOR_FILE):
                with open(PROCTOR_FILE, 'r', encoding='utf-8') as f:
                    proctor_data = json.load(f)
                
                items = proctor_data.get('tracked_items', [])
                self.check_interval = proctor_data.get('settings', {}).get('check_interval', 30)
                
                logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ proctor.json")
                logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫.")
                return items
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–∑ p.txt
                default_data = {
                    "tracked_items": [
                        "carrot", "strawberry", "blueberry", "orange tulip", "tomato", 
                        "corn", "daffodil", "watermelon", "pumpkin", "apple", "bamboo", 
                        "coconut", "cactus", "dragon fruit", "mango", "grape", "mushroom", 
                        "pepper", "cacao", "beanstalk", "ember lily", "sugar apple", 
                        "burning bud", "giant pinecone", "elder strawberry", "romanesco", 
                        "crimson thorn", "watering can", "trowel", "recall wrench", 
                        "basic sprinkler", "advanced sprinkler", "godly sprinkler", 
                        "magnifying glass", "tanning mirror", "master sprinkler", 
                        "cleaning spray", "favorite tool", "harvest tool", "friendship pot", 
                        "grantmaster sprinkler", "level lollipop", "common egg", 
                        "uncommon egg", "rare egg", "legendary egg", "mythical egg", 
                        "bug egg", "jungle egg"
                    ],
                    "settings": {
                        "check_interval": 30,
                        "notify_all_items": False,
                        "min_quantity": 1
                    },
                    "metadata": {
                        "last_updated": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        "total_items": 49
                    }
                }
                
                with open(PROCTOR_FILE, 'w', encoding='utf-8') as f:
                    json.dump(default_data, f, ensure_ascii=False, indent=2)
                
                logger.info("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª proctor.json —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–∑ p.txt")
                self.check_interval = 30
                return default_data['tracked_items']
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ proctor.json: {e}")
            self.check_interval = 30
            return ["carrot", "tomato", "corn"]

    def save_proctor_items(self, items=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        try:
            if items is None:
                items = self.proctor_items
            
            proctor_data = {
                "tracked_items": items,
                "settings": {
                    "check_interval": getattr(self, 'check_interval', 30),
                    "notify_all_items": False,
                    "min_quantity": 1
                },
                "metadata": {
                    "last_updated": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    "total_items": len(items)
                }
            }
            
            with open(PROCTOR_FILE, 'w', encoding='utf-8') as f:
                json.dump(proctor_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ proctor.json")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è proctor.json: {e}")
            return False

    def is_whitelisted(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""
        return str(user_id) in self.whitelist

    def add_to_whitelist(self, user_id, username="Unknown"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        user_id_str = str(user_id)
        if user_id_str not in self.whitelist:
            self.whitelist.append(user_id_str)
            if self.save_json(WHITELIST_FILE, self.whitelist):
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {user_id_str} ({username})")
                return True
        return False

    def remove_from_whitelist(self, user_id):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        user_id_str = str(user_id)
        if user_id_str in self.whitelist:
            self.whitelist.remove(user_id_str)
            if self.save_json(WHITELIST_FILE, self.whitelist):
                logger.info(f"‚ùå –£–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞: {user_id_str}")
                return True
        return False

    def add_pending_channel(self, channel_id, channel_title, invited_by, invite_link=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        self.pending_channels[str(channel_id)] = {
            'title': channel_title,
            'invited_by': invited_by,
            'request_time': time.time(),
            'invite_link': invite_link
        }
        if self.save_json(PENDING_CHANNELS_FILE, self.pending_channels):
            logger.info(f"‚è≥ –ö–∞–Ω–∞–ª –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {channel_title} (ID: {channel_id})")
            return True
        return False

    def remove_pending_channel(self, channel_id):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è"""
        channel_id_str = str(channel_id)
        if channel_id_str in self.pending_channels:
            del self.pending_channels[channel_id_str]
            if self.save_json(PENDING_CHANNELS_FILE, self.pending_channels):
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è: {channel_id_str}")
                return True
        return False

    def add_approved_channel(self, channel_id, channel_title, approved_by):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        self.approved_channels[str(channel_id)] = {
            'title': channel_title,
            'approved_at': time.time(),
            'approved_by': approved_by
        }
        self.stats['channels_approved'] = len(self.approved_channels)
        if self.save_json(APPROVED_CHANNELS_FILE, self.approved_channels):
            self.save_json(STATS_FILE, self.stats)
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –æ–¥–æ–±—Ä–µ–Ω: {channel_title} (ID: {channel_id})")
            return True
        return False

    def remove_approved_channel(self, channel_id):
        """–£–¥–∞–ª—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        channel_id_str = str(channel_id)
        if channel_id_str in self.approved_channels:
            del self.approved_channels[channel_id_str]
            self.stats['channels_approved'] = len(self.approved_channels)
            if self.save_json(APPROVED_CHANNELS_FILE, self.approved_channels):
                self.save_json(STATS_FILE, self.stats)
                logger.info(f"‚ùå –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω: {channel_id_str}")
                return True
        return False

    async def get_real_garden_stock(self):
        """Get real stock data from Grow A Garden API - NEW VERSION"""
        
        headers = {
            'accept': '*/*',
            'accept-language': 'en-US,en;q=0.9',
            'content-type': 'application/json',
            'priority': 'u=1, i',
            'referer': 'https://growagarden.gg/stocks',
            'trpc-accept': 'application/json',
            'x-trpc-source': 'gag',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        try:
            timeout = aiohttp.ClientTimeout(total=15)
            async with aiohttp.ClientSession(headers=headers, timeout=timeout) as session:
                async with session.get('https://growagarden.gg/api/stock') as response:
                    if response.status == 200:
                        raw_data = await response.json()
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ API")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        try:
                            with open('debug_stock_raw.json', 'w', encoding='utf-8') as f:
                                json.dump(raw_data, f, indent=2, ensure_ascii=False)
                            logger.info("üíæ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ debug_stock_raw.json")
                        except:
                            pass
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ JavaScript –∫–æ–¥–µ
                        formatted_data = self.format_stocks(raw_data)
                        return self.parse_formatted_stock_data(formatted_data)
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                        return {}
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∫–∞: {e}")
            return {}

    def format_items(self, items, image_data=None, is_last_seen=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç items –∫–∞–∫ –≤ JavaScript –∫–æ–¥–µ"""
        if not isinstance(items, list) or len(items) == 0:
            return []
        
        formatted_items = []
        for item in items:
            if not isinstance(item, dict):
                continue
                
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            name = item.get('name', 'Unknown')
            image = None
            if image_data and name in image_data:
                image = image_data[name]
            
            base_item = {'name': name}
            if image:
                base_item['image'] = image
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if is_last_seen:
                formatted_item = {
                    **base_item,
                    'emoji': item.get('emoji', '‚ùì'),
                    'seen': item.get('seen')
                }
            else:
                formatted_item = {
                    **base_item,
                    'value': item.get('value')
                }
            
            formatted_items.append(formatted_item)
        
        return formatted_items

    def format_stocks(self, stocks_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–æ–∫–∏ –∫–∞–∫ –≤ JavaScript –∫–æ–¥–µ"""
        image_data = stocks_data.get('imageData', {})
        
        formatted = {
            'easterStock': self.format_items(stocks_data.get('easterStock', []), image_data),
            'gearStock': self.format_items(stocks_data.get('gearStock', []), image_data),
            'eggStock': self.format_items(stocks_data.get('eggStock', []), image_data),
            'nightStock': self.format_items(stocks_data.get('nightStock', []), image_data),
            'honeyStock': self.format_items(stocks_data.get('honeyStock', []), image_data),
            'cosmeticsStock': self.format_items(stocks_data.get('cosmeticsStock', []), image_data),
            'seedsStock': self.format_items(stocks_data.get('seedsStock', []), image_data),
            
            'lastSeen': {
                'Seeds': self.format_items(stocks_data.get('lastSeen', {}).get('Seeds', []), image_data, True),
                'Gears': self.format_items(stocks_data.get('lastSeen', {}).get('Gears', []), image_data, True),
                'Weather': self.format_items(stocks_data.get('lastSeen', {}).get('Weather', []), image_data, True),
                'Eggs': self.format_items(stocks_data.get('lastSeen', {}).get('Eggs', []), image_data, True),
                'Honey': self.format_items(stocks_data.get('lastSeen', {}).get('Honey', []), image_data, True)
            },
            
            'restockTimers': stocks_data.get('restockTimers', {})
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            with open('debug_stock_formatted.json', 'w', encoding='utf-8') as f:
                json.dump(formatted, f, indent=2, ensure_ascii=False)
            logger.info("üíæ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ debug_stock_formatted.json")
        except:
            pass
            
        return formatted

    def parse_formatted_stock_data(self, formatted_data):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞"""
        stock_items = {}
        
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–æ–∫–æ–≤
            stock_categories = [
                'easterStock',      # –ü–∞—Å—Ö–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫
                'gearStock',        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                'eggStock',         # –Ø–π—Ü–∞
                'nightStock',       # –ù–æ—á–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω
                'honeyStock',       # –ú–µ–¥
                'cosmeticsStock',   # –ö–æ—Å–º–µ—Ç–∏–∫–∞
                'seedsStock'        # –°–µ–º–µ–Ω–∞
            ]
            
            total_found = 0
            
            for category in stock_categories:
                if category in formatted_data and isinstance(formatted_data[category], list):
                    category_items = formatted_data[category]
                    logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}: {len(category_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                    
                    category_found = 0
                    for item in category_items:
                        try:
                            if not isinstance(item, dict):
                                continue
                                
                            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                            name = item.get('name')
                            if not name:
                                continue
                                
                            name = str(name).lower().strip()
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (value –≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                            quantity = item.get('value')
                            if quantity is None:
                                continue
                                
                            if isinstance(quantity, str):
                                try:
                                    quantity = int(quantity)
                                except ValueError:
                                    quantity = 0
                            elif isinstance(quantity, (int, float)):
                                quantity = int(quantity)
                            else:
                                quantity = 0
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏
                            if name in self.proctor_items and quantity > 0:
                                stock_items[name] = quantity
                                category_found += 1
                                total_found += 1
                                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –≤ {category}: {name} - {quantity} —à—Ç.")
                                
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ {category}: {e}")
                            continue
                    
                    logger.info(f"‚úÖ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–∞–π–¥–µ–Ω–æ {category_found} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            
            logger.info(f"üìä –ò–¢–û–ì–û: –ù–∞–π–¥–µ–Ω–æ {total_found} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {list(formatted_data.keys())}")
            for category in stock_categories:
                if category in formatted_data:
                    items_count = len(formatted_data[category])
                    logger.info(f"   {category}: {items_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            
            return stock_items
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

    def format_stock_message(self, new_items):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–æ–∫–µ"""
        if not new_items:
            return None
            
        if len(new_items) == 1:
            title = "üéØ *–ù–û–í–´–ô –ü–†–ï–î–ú–ï–¢ –í –°–¢–û–ö–ï!*\n\n"
        else:
            title = f"üéØ *–ù–û–í–´–ï –ü–†–ï–î–ú–ï–¢–´ –í –°–¢–û–ö–ï!* ({len(new_items)} —à—Ç.)\n\n"
        
        items_text = ""
        for item_name, quantity in new_items.items():
            display_name = item_name.title()
            items_text += f"üü¢ *{display_name}* ‚Äî `{quantity}` —à—Ç.\n"
        
        message = f"{title}{items_text}\n‚è∞ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%H:%M:%S')}\n\nüîî *Garden Stock Bot*"
        return message

    def find_new_items(self, current_stock):
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        new_items = {}
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫: {len(current_stock)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        logger.info(f"üìã –¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {list(current_stock.keys())}")
        logger.info(f"üìã –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–æ–∫: {list(self.last_stock.keys())}")
        
        for item_name, quantity in current_stock.items():
            if item_name not in self.last_stock:
                new_items[item_name] = quantity
                logger.info(f"üÜï –ù–û–í–´–ô –ü–†–ï–î–ú–ï–¢ –û–ë–ù–ê–†–£–ñ–ï–ù: {item_name} - {quantity} —à—Ç.")
            else:
                logger.info(f"üîÅ –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –±—ã–ª: {item_name} - {quantity} —à—Ç.")
                
        self.last_stock = current_stock.copy()
        
        logger.info(f"üéØ –ò–¢–û–ì–û –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(new_items)}")
        return new_items

    async def send_stock_updates(self, application, new_items):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
        if not new_items:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
            
        message = self.format_stock_message(new_items)
        if not message:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
            
        sent_count = 0
        failed_channels = []
        
        logger.info(f"üì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ {len(self.approved_channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        for channel_id, channel_info in list(self.approved_channels.items()):
            try:
                logger.info(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: {channel_info['title']} (ID: {channel_id})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await application.bot.send_message(
                    chat_id=channel_id, 
                    text=message, 
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                
                self.last_messages[str(channel_id)] = sent_message.message_id
                sent_count += 1
                
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_info['title']}")
                await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
            except Exception as e:
                error_msg = str(e)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {error_msg}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                if any(err in error_msg for err in ["Chat not found", "bot is not a member", "Forbidden", "unauthorized"]):
                    failed_channels.append(channel_id)
                    logger.warning(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª {channel_id} –∏–∑ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        for channel_id in failed_channels:
            self.remove_approved_channel(channel_id)
        
        if sent_count > 0:
            self.stats['total_messages_sent'] += sent_count
            self.save_json(STATS_FILE, self.stats)
            logger.info(f"üìä –ò—Ç–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏: {sent_count} —É—Å–ø–µ—à–Ω–æ, {len(failed_channels)} –Ω–µ—É–¥–∞—á–Ω–æ")

    async def check_stock_loop(self, application):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞")
        
        check_count = 0
        error_count = 0
        
        while True:
            try:
                current_interval = getattr(self, 'check_interval', 30)
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ #{check_count + 1} (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval}—Å–µ–∫)")
                
                current_stock = await self.get_real_garden_stock()
                
                if current_stock:
                    logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω —Å—Ç–æ–∫: {len(current_stock)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                    
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    if current_stock:
                        logger.info("üìù –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –°–¢–û–ö–ï:")
                        for item_name, quantity in current_stock.items():
                            status = "üéØ –û–¢–°–õ–ï–ñ–ò–í–ê–ï–¢–°–Ø" if item_name in self.proctor_items else "üëÄ –í —Å—Ç–æ–∫–µ"
                            logger.info(f"  {status}: {item_name} - {quantity} —à—Ç.")
                    
                    new_items = self.find_new_items(current_stock)
                    
                    if new_items:
                        logger.info(f"üéÅ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {list(new_items.keys())}")
                        logger.info(f"üì® –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ {len(self.approved_channels)} –∫–∞–Ω–∞–ª–æ–≤")
                        await self.send_stock_updates(application, new_items)
                        error_count = 0
                    else:
                        check_count += 1
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ #{check_count} - –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫
                        if check_count % 5 == 0:
                            tracked_in_stock = [item for item in self.proctor_items if item in current_stock]
                            logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í —Å—Ç–æ–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö: {len(tracked_in_stock)}/{len(self.proctor_items)}")
                            
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞")
                    error_count += 1
                    if error_count > 3:
                        logger.error("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_stock –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                        self.last_stock = {}
                        return await self.check_stock_loop(application)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(current_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                error_count += 1
                await asyncio.sleep(60)

    def get_bot_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        uptime = time.time() - self.stats['start_time']
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        seconds = int(uptime % 60)
        
        return f"""
üåø GARDEN STOCK BOT - –°–¢–ê–¢–ò–°–¢–ò–ö–ê üåø

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours:02d}:{minutes:02d}:{seconds:02d}
üìä –ö–∞–Ω–∞–ª–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ: {self.stats['channels_approved']}
üì® –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['total_messages_sent']}
üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(self.whitelist)}
üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(self.proctor_items)}
‚è≥ –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {len(self.pending_channels)}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {getattr(self, 'check_interval', 30)} —Å–µ–∫.

üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%H:%M:%S')}
        """

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = GardenStockBot()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    if not bot.is_whitelisted(user_id):
        welcome_text = f"""
üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üåø

ü§ñ *Garden Stock Bot* - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç–µ–ª—å —Å—Ç–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ *Grow A Garden*.

‚ú® *–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö  
‚Ä¢ –†–∞–±–æ—Ç–∞ 24/7

üìù *–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª:* /request

‚ùì *–ü–æ–º–æ—â—å:* –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
        """
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="make_request")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_public")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        return
        
    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î
    admin_welcome = f"""
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name}! üåü

ü§ñ *Garden Stock Bot* –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

üìä *–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ: {len(bot.approved_channels)}
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(bot.proctor_items)}
‚Ä¢ –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {len(bot.pending_channels)}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {getattr(bot, 'check_interval', 30)} —Å–µ–∫.

üõ† *–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î:*

üìà *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/channels - –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã  
/pending - –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
/proctor - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã

‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:*
/approve <ID> - –û–¥–æ–±—Ä–∏—Ç—å –∫–∞–Ω–∞–ª
/reject <ID> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª

üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:*
/addadmin <ID> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
/removeadmin <ID> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
/listadmins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤

üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏:*
/additem <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
/removeitem <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
/setinterval <—Å–µ–∫—É–Ω–¥—ã> - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏

üß™ *–¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/teststock - –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞
/testmessage <ID> - –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
/resetstock - –°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å –æ —Å—Ç–æ–∫–µ

‚ùì *–ü–æ–º–æ—â—å:*
/help - –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

üí° *–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–æ–∫ –∫–∞–∂–¥—ã–µ {getattr(bot, 'check_interval', 30)} —Å–µ–∫—É–Ω–¥!*
    """
    
    stats = bot.get_bot_stats()
    await update.message.reply_text(admin_welcome)
    await update.message.reply_text(stats)

async def request_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    user = update.effective_user
    
    instruction_text = f"""
üì® –ó–ê–Ø–í–ö–ê –ù–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê

üë§ *–ó–∞—è–≤–∏—Ç–µ–ª—å:* {user.first_name}
üÜî *ID:* `{user.id}`

üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*

1. *–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª* –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏:
   - ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   - ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

2. *–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:*
   - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
   - ID –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)  
   - –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ

3. *–§–æ—Ä–º–∞—Ç:*

‚è≥ *–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤*
    """
    
    context.user_data['making_request'] = True
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_request")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(instruction_text, reply_markup=reply_markup)

async def handle_request_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    user = update.effective_user
    text = update.message.text
    
    if not context.user_data.get('making_request'):
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    lines = text.split('\n')
    channel_data = {'name': '', 'id': '', 'link': ''}
    
    for line in lines:
        line = line.strip()
        if line.startswith('–ù–∞–∑–≤–∞–Ω–∏–µ:'):
            channel_data['name'] = line.replace('–ù–∞–∑–≤–∞–Ω–∏–µ:', '').strip()
        elif line.startswith('ID:'):
            channel_data['id'] = line.replace('ID:', '').strip()
        elif 't.me/' in line or 'https://' in line:
            channel_data['link'] = line.strip()
    
    if not channel_data['name']:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: `–ù–∞–∑–≤–∞–Ω–∏–µ: –í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    request_id = int(time.time())
    channel_id = channel_data['id'] or f"pending_{request_id}"
    invited_by = f"{user.first_name} (ID: {user.id})"
    
    if bot.add_pending_channel(channel_id, channel_data['name'], invited_by, channel_data['link']):
        context.user_data.pop('making_request', None)
        
        success_text = f"""
‚úÖ –ó–ê–Ø–í–ö–ê –ü–û–î–ê–ù–ê!

üìã *–î–∞–Ω–Ω—ã–µ:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_data['name']}
‚Ä¢ ID: `{channel_id}`
‚Ä¢ –°—Å—ã–ª–∫–∞: {channel_data['link'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

‚è≥ *–û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.*
        """
        
        await update.message.reply_text(success_text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        notification_text = f"""
üì® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!

üì¢ {channel_data['name']}
üÜî `{channel_id}`
üë§ {user.first_name} (`{user.id}`)

/pending - –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
        """
        
        for admin_id in bot.whitelist:
            try:
                await context.bot.send_message(int(admin_id), notification_text)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {admin_id}: {e}")
                
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

async def cancel_request_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    if context.user_data.get('making_request'):
        context.user_data.pop('making_request', None)
        await update.message.reply_text("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    stats = bot.get_bot_stats()
    await update.message.reply_text(stats)

async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not bot.approved_channels:
        await update.message.reply_text("üì≠ –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return
        
    channels_list = "‚úÖ –û–î–û–ë–†–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´:\n\n"
    for channel_id, channel_info in bot.approved_channels.items():
        approved_time = datetime.fromtimestamp(channel_info['approved_at']).strftime('%d.%m.%Y %H:%M')
        channels_list += f"üì¢ {channel_info['title']}\nüÜî `{channel_id}`\n‚è∞ –û–¥–æ–±—Ä–µ–Ω: {approved_time}\n\n"
    
    await update.message.reply_text(channels_list)

async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not bot.pending_channels:
        await update.message.reply_text("‚è≥ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        return
        
    pending_list = "‚è≥ –ó–ê–Ø–í–ö–ò –ù–ê –†–ê–°–°–ú–û–¢–†–ï–ù–ò–ò:\n\n"
    buttons = []
    
    for channel_id, channel_info in bot.pending_channels.items():
        request_time = datetime.fromtimestamp(channel_info['request_time']).strftime('%d.%m %H:%M')
        pending_list += f"üì¢ {channel_info['title']}\nüÜî `{channel_id}`\nüë§ –î–æ–±–∞–≤–∏–ª: {channel_info['invited_by']}\n‚è∞ –ó–∞–ø—Ä–æ—Å: {request_time}\n\n"
        
        buttons.append([
            InlineKeyboardButton(f"‚úÖ {channel_info['title'][:15]}", callback_data=f"approve:{channel_id}"),
            InlineKeyboardButton(f"‚ùå {channel_info['title'][:15]}", callback_data=f"reject:{channel_id}")
        ])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(pending_list, reply_markup=reply_markup)

async def approve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–¥–æ–±—Ä—è–µ—Ç –∫–∞–Ω–∞–ª –ø–æ ID"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <channel_id>")
        return
        
    channel_id = context.args[0]
    
    if channel_id not in bot.pending_channels:
        await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
        return
        
    channel_info = bot.pending_channels[channel_id]
    
    # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
    if channel_info.get('invite_link'):
        try:
            await context.bot.join_chat(channel_info['invite_link'])
            logger.info(f"‚úÖ –ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É {channel_info['title']}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É: {e}")
    
    if bot.add_approved_channel(channel_id, channel_info['title'], f"user_{user_id}"):
        bot.remove_pending_channel(channel_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        try:
            await context.bot.send_message(
                chat_id=channel_id,
                text="‚úÖ *Garden Stock Bot –ø–æ–¥–∫–ª—é—á–µ–Ω!*\n\nüîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –≤ —Å—Ç–æ–∫–µ –∏–≥—Ä—ã Grow A Garden!",
                parse_mode='Markdown'
            )
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel_info['title']}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª –æ–¥–æ–±—Ä–µ–Ω!\n\nüì¢ {channel_info['title']}\nüÜî `{channel_id}`")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

async def reject_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∫–∞–Ω–∞–ª –ø–æ ID"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <channel_id>")
        return
        
    channel_id = context.args[0]
    
    if channel_id not in bot.pending_channels:
        await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
        return
        
    channel_info = bot.pending_channels[channel_id]
    
    if bot.remove_pending_channel(channel_id):
        await update.message.reply_text(f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\nüì¢ {channel_info['title']}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")

async def proctor_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    items_text = "üéØ –û–¢–°–õ–ï–ñ–ò–í–ê–ï–ú–´–ï –ü–†–ï–î–ú–ï–¢–´:\n\n"
    for i, item in enumerate(bot.proctor_items, 1):
        items_text += f"{i}. `{item}`\n"
    
    items_text += f"\nüìä –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(bot.proctor_items)}"
    items_text += f"\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {getattr(bot, 'check_interval', 30)} —Å–µ–∫."
    
    await update.message.reply_text(items_text)

async def add_item_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /additem <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞>")
        return
        
    item_name = ' '.join(context.args).lower().strip()
    
    if item_name in bot.proctor_items:
        await update.message.reply_text(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç `{item_name}` —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        return
        
    bot.proctor_items.append(item_name)
    
    if bot.save_proctor_items():
        await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç `{item_name}` –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!")
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {item_name}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.")

async def remove_item_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeitem <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞>")
        return
        
    item_name = ' '.join(context.args).lower().strip()
    
    if item_name not in bot.proctor_items:
        await update.message.reply_text(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç `{item_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        return
        
    bot.proctor_items.remove(item_name)
    
    if bot.save_proctor_items():
        await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç `{item_name}` —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!")
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {item_name}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.")

async def set_interval_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinterval <—Å–µ–∫—É–Ω–¥—ã>")
        return
        
    interval = int(context.args[0])
    
    if interval < 10:
        await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥.")
        return
        
    if interval > 300:
        await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 300 —Å–µ–∫—É–Ω–¥.")
        return
        
    bot.check_interval = interval
    bot.save_proctor_items()
    
    await update.message.reply_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")
    logger.info(f"‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval} —Å–µ–∫.")

async def test_stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–∫–∞...")
    
    current_stock = await bot.get_real_garden_stock()
    
    if current_stock:
        stock_text = "üìä –¢–ï–ö–£–©–ò–ô –°–¢–û–ö:\n\n"
        for item_name, quantity in current_stock.items():
            status = "üéØ" if item_name in bot.proctor_items else "üëÄ"
            stock_text += f"{status} `{item_name}` - {quantity} —à—Ç.\n"
        
        tracked_count = len([item for item in bot.proctor_items if item in current_stock])
        stock_text += f"\nüìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤ —Å—Ç–æ–∫–µ: {tracked_count}/{len(bot.proctor_items)}"
        
        await update.message.reply_text(stock_text)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞")

async def test_message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /testmessage <channel_id>")
        return
        
    channel_id = context.args[0]
    
    try:
        test_message = "üß™ *–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï*\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç Garden Stock Bot. –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        
        await context.bot.send_message(
            chat_id=channel_id,
            text=test_message,
            parse_mode='Markdown'
        )
        
        await update.message.reply_text(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª `{channel_id}`")
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel_id}")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def reset_stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞–º—è—Ç—å –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å—Ç–æ–∫–µ"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    bot.last_stock = {}
    await update.message.reply_text("‚úÖ –ü–∞–º—è—Ç—å –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å—Ç–æ–∫–µ —Å–±—Ä–æ—à–µ–Ω–∞! –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∫–∞–∫ –Ω–æ–≤—ã–µ.")
    logger.info("üîÑ –ü–∞–º—è—Ç—å –æ —Å—Ç–æ–∫–µ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        # –ü–æ–º–æ—â—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = """
üåø GARDEN STOCK BOT - –ü–û–ú–û–©–¨ üåø

ü§ñ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?*
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä–µ Grow A Garden –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.

üìù *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª?*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /request –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!

‚è∞ *–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫:* –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 24/7

üîß *–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:* –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /request
        """
        await update.message.reply_text(help_text)
        return
        
    # –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö
    help_text = """
üåø GARDEN STOCK BOT - –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î üåø

üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/channels - –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
/pending - –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
/proctor - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã

‚öôÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò:
/approve <ID> - –û–¥–æ–±—Ä–∏—Ç—å –∫–∞–Ω–∞–ª
/reject <ID> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª

üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò:
/addadmin <ID> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/removeadmin <ID> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/listadmins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–î–ú–ï–¢–ê–ú–ò:
/additem <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/removeitem <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/setinterval <—Å–µ–∫—É–Ω–¥—ã> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏

üß™ –¢–ï–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´:
/teststock - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫
/testmessage <ID> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/resetstock - –°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å –æ —Å—Ç–æ–∫–µ

üìù –ü–†–û–¶–ï–°–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /request
2. –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏
3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ /pending
4. –û–¥–æ–±—Ä—è–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã

üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–æ–∫!
    """
    await update.message.reply_text(help_text)

async def add_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>")
        return
        
    new_admin_id = context.args[0]
    username = update.effective_user.username or "Unknown"
    
    if bot.add_to_whitelist(new_admin_id, username):
        await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüÜî `{new_admin_id}`")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def remove_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin <user_id>")
        return
        
    remove_admin_id = context.args[0]
    
    if remove_admin_id == str(user_id):
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        return
        
    if bot.remove_from_whitelist(remove_admin_id):
        await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!\n\nüÜî `{remove_admin_id}`")
    else:
        await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")

async def list_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.effective_user.id
    
    if not bot.is_whitelisted(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
        
    if not bot.whitelist:
        await update.message.reply_text("üë• –í –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
        
    admins_list = "üë• –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´:\n\n"
    for admin_id in bot.whitelist:
        admins_list += f"‚ñ´Ô∏è `{admin_id}`\n"
    
    await update.message.reply_text(admins_list)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user = query.from_user
    data = query.data
    
    await query.answer()
    
    if data == "make_request":
        await query.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /request –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏")
        return
        
    elif data == "help_public":
        help_text = """
‚ùì –ü–û–ú–û–©–¨:

ü§ñ *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ Grow A Garden
- –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
- –†–∞–±–æ—Ç–∞–µ—Ç 24/7

üìù *–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª?*
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /request
- –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
- –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è

‚è∞ *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞:* –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        """
        await query.message.reply_text(help_text)
        return
        
    elif data == "cancel_request":
        if context.user_data.get('making_request'):
            context.user_data.pop('making_request', None)
            await query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if not bot.is_whitelisted(user.id):
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
        
    if data.startswith('approve:'):
        channel_id = data.split(':')[1]
        
        if channel_id in bot.pending_channels:
            channel_info = bot.pending_channels[channel_id]
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É
            if channel_info.get('invite_link'):
                try:
                    await context.bot.join_chat(channel_info['invite_link'])
                    logger.info(f"‚úÖ –ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ {channel_info['title']}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: {e}")
            
            if bot.add_approved_channel(channel_id, channel_info['title'], f"user_{user.id}"):
                bot.remove_pending_channel(channel_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await context.bot.send_message(
                        chat_id=channel_id,
                        text="‚úÖ *Garden Stock Bot –ø–æ–¥–∫–ª—é—á–µ–Ω!*\n\n–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö!",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
                await query.edit_message_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª –æ–¥–æ–±—Ä–µ–Ω!\n\n"
                    f"üì¢ {channel_info['title']}\n"
                    f"üÜî `{channel_id}`"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏.")
        else:
            await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
    elif data.startswith('reject:'):
        channel_id = data.split(':')[1]
        
        if channel_id in bot.pending_channels:
            channel_info = bot.pending_channels[channel_id]
            
            if bot.remove_pending_channel(channel_id):
                await query.edit_message_text(
                    f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                    f"üì¢ {channel_info['title']}\n"
                    f"üÜî `{channel_id}`"
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")
        else:
            await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("request", request_command))
    application.add_handler(CommandHandler("cancelrequest", cancel_request_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("channels", channels_command))
    application.add_handler(CommandHandler("pending", pending_command))
    application.add_handler(CommandHandler("approve", approve_command))
    application.add_handler(CommandHandler("reject", reject_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    application.add_handler(CommandHandler("addadmin", add_admin_command))
    application.add_handler(CommandHandler("removeadmin", remove_admin_command))
    application.add_handler(CommandHandler("listadmins", list_admins_command))
    
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    application.add_handler(CommandHandler("proctor", proctor_command))
    application.add_handler(CommandHandler("additem", add_item_command))
    application.add_handler(CommandHandler("removeitem", remove_item_command))
    application.add_handler(CommandHandler("setinterval", set_interval_command))
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("teststock", test_stock_command))
    application.add_handler(CommandHandler("testmessage", test_message_command))
    application.add_handler(CommandHandler("resetstock", reset_stock_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_request_data
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

async def start_stock_checker(application):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–∫–∞ –≤ —Ñ–æ–Ω–µ"""
    await asyncio.sleep(5)  # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.check_stock_loop(application)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        from config import BOT_TOKEN
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Replit
        Thread(target=run_web, daemon=True).start()
        logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Job Queue
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(application)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–∫–∞ –≤ —Ñ–æ–Ω–µ
        loop = asyncio.get_event_loop()
        loop.create_task(start_stock_checker(application))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üåø –ó–∞–ø—É—Å–∫–∞–µ–º Garden Stock Bot...")
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(bot.whitelist)}")
        logger.info(f"   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(bot.proctor_items)}")
        logger.info(f"   - –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(bot.approved_channels)}")
        logger.info(f"   - –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: {len(bot.pending_channels)}")
        logger.info(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {getattr(bot, 'check_interval', 30)} —Å–µ–∫.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        application.run_polling()
        
    except ImportError:
        logger.error("‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å BOT_TOKEN.")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == '__main__':
    main()